/*
 * medialockerapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 03/03/2017
 */
package apiclient_pkg


import(
	"encoding/json"
	"medialockerapi_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"medialockerapi_lib"
	"medialockerapi_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type APICLIENT_IMPL struct { }

/**
 * create a new media item to be uploaded
 * @param    *models_pkg.MediaItem        mediaItem     parameter: Required
 * @return	Returns the []*models_pkg.MediaItem response from the API call
 */
func (me *APICLIENT_IMPL) AddMediaItem (
            mediaItem *models_pkg.MediaItem) ([]*models_pkg.MediaItem, error) {
        //the base uri for api requests
    _queryBuilder := medialockerapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/library"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, mediaItem)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("invalid input, object invalid", _response.Code, _response.RawBody)
    } else if (_response.Code == 409) {
        err = apihelper_pkg.NewAPIError("an existing item already exists", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("unexpected error", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal []*models_pkg.MediaItem
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * List the media library items.
 * @param    *int64        offset     parameter: Optional
 * @param    *int64        limit      parameter: Optional
 * @return	Returns the []*models_pkg.MediaItem response from the API call
 */
func (me *APICLIENT_IMPL) GetLibraryIndex (
            offset *int64,
            limit *int64) ([]*models_pkg.MediaItem, error) {
        //the base uri for api requests
    _queryBuilder := medialockerapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/library"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "offset" : offset,
        "limit" : limit,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("bad input parameter", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal []*models_pkg.MediaItem
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

